# This is a basic workflow to help you get started with Actions

name: Build_And_Deploy_To_Azure
env:
  #ARM Template Parameters
  TAG_CICD_Engine_Name: GitHub Actions
  Azure_Resource_Group: dabu-PartsUnlimited
  SQL_Server_Name: dabu-PartsUnlimited
  Website_Name: dabu-PartsUnlimited
  Hosting_Plan_Name: dabu-PartsUnlimited
  ARM_FILE_PATH: 'PartsUnlimited-aspnet45/env/PartsUnlimitedEnv/Templates'
  ARM_FILE_NAME: 'FullEnvironmentSetupMerged'
  Deployment_Name: PartsUnlimited.${{ github.workflow }}.${{ github.run_number }}
  # Webapp variables
  AZURE_WEBAPP_NAME: 'dabu-PartsUnlimited'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a multiple jobs: "CI", "Dev", "QA", "Prod"
###################################################################
# CI Stage                                                        #
###################################################################
  CI:
    # The type of runner that the job will run on
    runs-on: windows-2019
    env: 
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: 'PartsUnlimited-aspnet45'
      SOLUTION: 'PartsUnlimited-aspnet45/PartsUnlimited.sln'
      ARTIFACT_STAGING_PATH: 'PartsUnlimited-aspnet45/src/PartsUnlimitedWebsite'
      ARTIFACT_STAGING_FOLDER: 'bin/ArtifactStaging'
      TESTS_STAGING_PATH: 'PartsUnlimited-aspnet45/test/PartsUnlimited.SeleniumTests/bin'
  
      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_PLATFORM: 'anycpu'
      BUILD_CONFIGURATION: Release
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      ###########################################
      # Build App
      ###########################################
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Cache NuGet packages
        uses: actions/cache@v2
        env:
          cache-name: Cache-NuGet-Packages
        with:
          path: "PartsUnlimited-aspnet45/packages"
          key: ${{ env.cache-name }}-${{ hashFiles('PartsUnlimited-aspnet45/src/PartsUnlimitedWebsite/packages.config') }}-${{ hashFiles('PartsUnlimited-aspnet45/test/PartsUnlimited.SeleniumTests/packages.config') }}-${{ hashFiles('PartsUnlimited-aspnet45/test/PartsUnlimited.UnitTests/packages.config') }}

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:PlatformTarget=${{ env.BUILD_PLATFORM }} /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{env.GITHUB_WORKSPACE}}/${{env.ARTIFACT_STAGING_PATH}}/${{env.ARTIFACT_STAGING_FOLDER}}" ${{env.SOLUTION}} 
      
      - name: Upload Build Artifacts
#        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@main
        with:
          name: Website
          path: "${{env.GITHUB_WORKSPACE}}/${{env.ARTIFACT_STAGING_PATH}}/${{env.ARTIFACT_STAGING_FOLDER}}"

      - name: Upload Test Artifacts
#        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@main
        with:
          name: Tests
          path: "${{env.TESTS_STAGING_PATH}}/${{env.BUILD_CONFIGURATION}}"

      ###########################################
      # Validate the ARM Template
      ###########################################
      - name: "Azure login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Validate ARM Template"
        id: ValidateARMTemplate
        uses: azure/arm-deploy@v1
        with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         resourceGroupName: ${{ env.Azure_Resource_Group }}
         template: "${{ env.ARM_FILE_PATH }}/${{ env.ARM_FILE_NAME }}.json"
         parameters: ${{ env.ARM_FILE_PATH }}/${{ env.ARM_FILE_NAME }}.param.json CICDEngineName="${{ env.TAG_CICD_Engine_Name }}" PUL_ServerName=${{ env.SQL_Server_Name }} PUL_DBLogin=${{ secrets.SQL_DB_LOGIN }} PUL_DBPassword=${{ secrets.SQL_DB_PASSWORD }} PUL_DBPasswordForTest=${{ secrets.SQL_DB_PASSWORD }} PUL_HostingPlanName=${{ env.Hosting_Plan_Name }} WebsiteName=${{ env.Website_Name }} 
         deploymentMode: Validate
         deploymentName: ${{ env.Deployment_Name }}

      - name: Azure logout
        run: |
          az logout
  
      - name: Upload ARM Artifacts
#        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@main
        with:
          name: ARM_Templates
          path: "${{ env.ARM_FILE_PATH }}/${{ env.ARM_FILE_NAME }}.*"


  Dev:
    ###########################################################################
    # REMOVE THIS COMMENT  
    # if: contains(github.event_name, 'push')
    ###########################################################################
    
    # The type of runner that the job will run on
    runs-on: windows-2019
    env:
      ENV_NAME: -dev 

    environment:
      name: Dev
      url: ${{ steps.DeployWebApp.outputs.url_output }}

    needs: CI
    steps:
      ###########################################
      # Deploy the ARM Template
      ###########################################
      - name: Download ARM Files
        uses: actions/download-artifact@main
        with:
          name: ARM_Templates
          path: ${{ env.ARM_FILE_PATH }}
          
      - name: "Azure login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy ARM Template"
        id: DeployARMTemplate
        uses: azure/arm-deploy@v1
        with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         resourceGroupName: ${{ env.Azure_Resource_Group }}
         template: ${{ env.ARM_FILE_PATH }}/${{ env.ARM_FILE_NAME }}.json
         parameters: ${{ env.ARM_FILE_PATH }}/${{ env.ARM_FILE_NAME }}.param.json CICDEngineName="${{ env.TAG_CICD_Engine_Name }}" PUL_ServerName=${{ env.SQL_Server_Name }} PUL_DBLogin=${{ secrets.SQL_DB_LOGIN }} PUL_DBPassword=${{ secrets.SQL_DB_PASSWORD }} PUL_DBPasswordForTest=${{ secrets.SQL_DB_PASSWORD }} PUL_HostingPlanName=${{ env.Hosting_Plan_Name }} WebsiteName=${{ env.Website_Name }} 
         deploymentMode: Incremental
         deploymentName: ${{ env.Deployment_Name }}

      - name: Azure logout
        run: |
          az logout

      ###########################################
      # Deploy the Web App
      ###########################################
      - name: Download build artifacts
        uses: actions/download-artifact@main
        with:
          name: Website
          path: Website

      - name: Deploy Azure WebApp
        id: DeployWebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: Website/*.zip

      ###########################################
      # Test the Web App
      ###########################################
      - name: Download test artifacts
        uses: actions/download-artifact@main
        with:
          name: Tests
          path: Tests

  QA:
    if: contains(github.event_name, 'push')
    
    # The type of runner that the job will run on
    runs-on: windows-2019
    env:
      ENV_NAME: -qa
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    environment:
      name: QA
      url: https://dabu-partsunlimited-qa.azurewebsites.net/ 

    needs: Dev
    steps:
      - name: "Azure login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo 'This is QA!'

      - name: Azure logout
        run: |
          az logout

  Production:
    if: contains(github.event_name, 'push')
    
    # The type of runner that the job will run on
    runs-on: windows-2019
    env:
      ENV_NAME: ${{null}} 

    # Steps represent a sequence of tasks that will be executed as part of the job
    environment:
      name: Production
      url: https://dabu-partsunlimited.azurewebsites.net/ 

    needs: QA
    steps:
      - name: "Azure login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo 'This is Production!'

      - name: Azure logout
        run: |
          az logout
